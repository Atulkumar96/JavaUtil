package com.ecom.javautil.streams;

import java.util.*;
import java.util.stream.Stream;

public class CreateStreams {

    public static void main(String[] args) {
        /* Streams from
        List
        Arrays

        Stream.of()
        Stream.iterate()
        Stream.generate()
         */

        List<String> list = Arrays.asList("Atul", "Rahul", "Rohit");
        Stream<String> streamFromList = list.stream();

        String[] array = {"Atul", "Rahul", "Rohit"};
        Stream<String> streamFromArray = Arrays.stream(array);

        Stream<String> streamFromOfValues = Stream.of("Atul", "Rahul", "Rohit");

        //Infinite Stream - Stream.iterate()
        Stream<Integer> streamFromIterate = Stream.iterate(1, n -> n * 2)
                .limit(10);

        //Infinite Stream - Stream.generate()
        Stream<Double> streamFromGenerate = Stream.generate(() -> Math.random() * 100);

        /*print value from streamFromGenerate by limiting to 5 as it is an infinite stream
        streamFromGenerate.limit(5).forEach(System.out::println);
         */

    }
}

/*
Summary
- Streams can be created from List, Arrays, Stream.of(), Stream.iterate(), Stream.generate()
- Stream from List and Arrays can be created using list.stream() and Arrays.stream(array)
  respectively
- Stream can be created from a collection using collection.stream()
- Stream.of() is used to create a stream from a list of provided values
- Stream.iterate() is used to create an infinite stream where the first element is the seed
  and the next element is generated by applying the function to the previous element
- Stream.generate() is used to create an infinite stream where the elements are generated
  by the supplier
- Stream.iterate and Stream.generate can be limited using limit() method since they are
  infinite streams and can cause OutOfMemoryError
 */
